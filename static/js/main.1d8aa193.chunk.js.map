{"version":3,"sources":["MemeGenerator.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["MemeGenerator","useState","topText","setTopText","bottomText","setBottomText","randomImg","setRandomImg","allMemeImgs","setAllMemeImgs","fetch","then","response","json","memes","data","console","log","className","onSubmit","event","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","type","name","placeholder","value","onChange","e","target","src","alt","Header","StrictMode","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gQAEe,SAASA,IAAiB,IAAD,EACRC,mBAAS,IADD,mBAC/BC,EAD+B,KACtBC,EADsB,OAEFF,mBAAS,IAFP,mBAE/BG,EAF+B,KAEnBC,EAFmB,OAGJJ,mBAChC,oCAJoC,mBAG/BK,EAH+B,KAGpBC,EAHoB,OAMAN,mBAAS,IANT,mBAM/BO,EAN+B,KAMlBC,EANkB,KAUtCC,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAc,IACXE,EAAUF,EAASG,KAAnBD,MACRE,QAAQC,IAAIH,EAAM,IAClBL,EAAeK,MAYnB,OACE,6BACE,0BAAMI,UAAU,YAAYC,SAThB,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWjB,EAAYkB,QACjDC,EAAcnB,EAAYc,GAASM,IACzCrB,EAAaoB,KAMT,2BACEE,KAAK,OACLC,KAAK,UACLC,YAAY,WACZC,MAAO9B,EACP+B,SAAU,SAACC,GACT/B,EAAW+B,EAAEC,OAAOH,UAGxB,2BACEH,KAAK,OACLC,KAAK,aACLC,YAAY,cACZC,MAAO5B,EACP6B,SAAU,SAACC,GACT7B,EAAc6B,EAAEC,OAAOH,UAI3B,wCAEF,yBAAKd,UAAU,QACb,yBAAKkB,IAAK9B,EAAW+B,IAAI,KACzB,wBAAInB,UAAU,OAAOhB,GACrB,wBAAIgB,UAAU,UAAUd,KCtDjB,SAASkC,IACtB,OACE,kBAAC,IAAMC,WAAP,KACE,gCACE,yBACEH,IAAI,iEACJC,IAAI,aAEN,+CCJO,SAASG,IACtB,OACE,kBAAC,IAAMD,WAAP,KACE,kBAACD,EAAD,MACA,kBAACtC,EAAD,OCEcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMR,WAAP,KACE,kBAAC,EAAD,OAEFS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.1d8aa193.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function MemeGenerator() {\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [randomImg, setRandomImg] = useState(\n    \"https://i.imgflip.com/1ur9b0.jpg\"\n  );\n  const [allMemeImgs, setAllMemeImgs] = useState([]);\n\n  //useEffect(() => {\n  // code to run on component mount\n  fetch(\"https://api.imgflip.com/get_memes\")\n    .then((response) => response.json())\n    .then((response) => {\n      const { memes } = response.data;\n      console.log(memes[0]);\n      setAllMemeImgs(memes);\n    });\n  /*\n    //}, []); */\n\n  const submitt = (event) => {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * allMemeImgs.length);\n    const randMemeImg = allMemeImgs[randNum].url;\n    setRandomImg(randMemeImg);\n  };\n\n  return (\n    <div>\n      <form className=\"meme-form\" onSubmit={submitt}>\n        <input\n          type=\"text\"\n          name=\"topText\"\n          placeholder=\"Top Text\"\n          value={topText}\n          onChange={(e) => {\n            setTopText(e.target.value);\n          }}\n        />\n        <input\n          type=\"text\"\n          name=\"bottomText\"\n          placeholder=\"Bottom Text\"\n          value={bottomText}\n          onChange={(e) => {\n            setBottomText(e.target.value);\n          }}\n        />\n\n        <button>Gen</button>\n      </form>\n      <div className=\"meme\">\n        <img src={randomImg} alt=\"\" />\n        <h2 className=\"top\">{topText}</h2>\n        <h2 className=\"bottom\">{bottomText}</h2>\n      </div>\n    </div>\n  );\n}\n\n/*/*\nimport React, { Component } from \"react\";\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((response) => {\n        const { memes } = response.data;\n        this.setState({ allMemeImgs: memes });\n      });\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randMemeImg = this.state.allMemeImgs[randNum].url;\n    this.setState({ randomImg: randMemeImg });\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"topText\"\n            placeholder=\"Top Text\"\n            value={this.state.topText}\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"bottomText\"\n            placeholder=\"Bottom Text\"\n            value={this.state.bottomText}\n            onChange={this.handleChange}\n          />\n\n          <button>Gen</button>\n        </form>\n        <div className=\"meme\">\n          <img src={this.state.randomImg} alt=\"\" />\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n      </div>\n    );\n  }\n}\n*/\n","import React from \"react\";\n\nexport default function Header() {\n  return (\n    <React.StrictMode>\n      <header>\n        <img\n          src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n          alt=\"Problem?\"\n        />\n        <p>Meme Generator</p>\n      </header>\n    </React.StrictMode>\n  );\n}\n","import React from \"react\";\n\nimport \"./App.css\";\nimport MemeGenerator from \"./MemeGenerator\";\nimport Header from \"./Header\";\n\nexport default function App() {\n  return (\n    <React.StrictMode>\n      <Header />\n      <MemeGenerator />\n    </React.StrictMode>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}